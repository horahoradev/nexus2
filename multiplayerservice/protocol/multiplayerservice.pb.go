// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.12.4
// source: multiplayerservice/protocol/multiplayerservice.proto

package nexus2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ClientMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ClientMessage_Movemsg
	//	*ClientMessage_Navigatemsg
	//	*ClientMessage_Chatmsg
	Payload isClientMessage_Payload `protobuf_oneof:"Payload"`
}

func (x *ClientMessage) Reset() {
	*x = ClientMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMessage) ProtoMessage() {}

func (x *ClientMessage) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMessage.ProtoReflect.Descriptor instead.
func (*ClientMessage) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{0}
}

func (m *ClientMessage) GetPayload() isClientMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ClientMessage) GetMovemsg() *ClientMove {
	if x, ok := x.GetPayload().(*ClientMessage_Movemsg); ok {
		return x.Movemsg
	}
	return nil
}

func (x *ClientMessage) GetNavigatemsg() *ClientNavigate {
	if x, ok := x.GetPayload().(*ClientMessage_Navigatemsg); ok {
		return x.Navigatemsg
	}
	return nil
}

func (x *ClientMessage) GetChatmsg() *ClientChat {
	if x, ok := x.GetPayload().(*ClientMessage_Chatmsg); ok {
		return x.Chatmsg
	}
	return nil
}

type isClientMessage_Payload interface {
	isClientMessage_Payload()
}

type ClientMessage_Movemsg struct {
	Movemsg *ClientMove `protobuf:"bytes,1,opt,name=movemsg,proto3,oneof"` // publish new location
}

type ClientMessage_Navigatemsg struct {
	Navigatemsg *ClientNavigate `protobuf:"bytes,2,opt,name=navigatemsg,proto3,oneof"` // Navigate to another map, receive map info
}

type ClientMessage_Chatmsg struct {
	Chatmsg *ClientChat `protobuf:"bytes,3,opt,name=chatmsg,proto3,oneof"` // This was added after the above two fields, and is used for the metadata.json file for the video
}

func (*ClientMessage_Movemsg) isClientMessage_Payload() {}

func (*ClientMessage_Navigatemsg) isClientMessage_Payload() {}

func (*ClientMessage_Chatmsg) isClientMessage_Payload() {}

type ServerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Payload:
	//	*ServerMessage_Movemsg
	//	*ServerMessage_Navigateresp
	//	*ServerMessage_Chatmsg
	//	*ServerMessage_Joinmsg
	Payload isServerMessage_Payload `protobuf_oneof:"Payload"`
}

func (x *ServerMessage) Reset() {
	*x = ServerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMessage) ProtoMessage() {}

func (x *ServerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMessage.ProtoReflect.Descriptor instead.
func (*ServerMessage) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{1}
}

func (m *ServerMessage) GetPayload() isServerMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ServerMessage) GetMovemsg() *ServerMove {
	if x, ok := x.GetPayload().(*ServerMessage_Movemsg); ok {
		return x.Movemsg
	}
	return nil
}

func (x *ServerMessage) GetNavigateresp() *ServerNavigate {
	if x, ok := x.GetPayload().(*ServerMessage_Navigateresp); ok {
		return x.Navigateresp
	}
	return nil
}

func (x *ServerMessage) GetChatmsg() *ServerChat {
	if x, ok := x.GetPayload().(*ServerMessage_Chatmsg); ok {
		return x.Chatmsg
	}
	return nil
}

func (x *ServerMessage) GetJoinmsg() *PlayerJoin {
	if x, ok := x.GetPayload().(*ServerMessage_Joinmsg); ok {
		return x.Joinmsg
	}
	return nil
}

type isServerMessage_Payload interface {
	isServerMessage_Payload()
}

type ServerMessage_Movemsg struct {
	Movemsg *ServerMove `protobuf:"bytes,1,opt,name=movemsg,proto3,oneof"` // subscription messages indicating new locations for other players
}

type ServerMessage_Navigateresp struct {
	Navigateresp *ServerNavigate `protobuf:"bytes,2,opt,name=navigateresp,proto3,oneof"` // resp to client navigation request, indicates new map resource location and e.g. music
}

type ServerMessage_Chatmsg struct {
	// Includes list of all players, models, and locations
	Chatmsg *ServerChat `protobuf:"bytes,3,opt,name=chatmsg,proto3,oneof"` // chat messages for current room
}

type ServerMessage_Joinmsg struct {
	Joinmsg *PlayerJoin `protobuf:"bytes,4,opt,name=joinmsg,proto3,oneof"` // indicates model and starting position for new players
}

func (*ServerMessage_Movemsg) isServerMessage_Payload() {}

func (*ServerMessage_Navigateresp) isServerMessage_Payload() {}

func (*ServerMessage_Chatmsg) isServerMessage_Payload() {}

func (*ServerMessage_Joinmsg) isServerMessage_Payload() {}

type ClientMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *ClientMove) Reset() {
	*x = ClientMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientMove) ProtoMessage() {}

func (x *ClientMove) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientMove.ProtoReflect.Descriptor instead.
func (*ClientMove) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{2}
}

func (x *ClientMove) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ClientMove) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

type ClientNavigate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapID string `protobuf:"bytes,1,opt,name=mapID,proto3" json:"mapID,omitempty"` // uuid
}

func (x *ClientNavigate) Reset() {
	*x = ClientNavigate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientNavigate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientNavigate) ProtoMessage() {}

func (x *ClientNavigate) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientNavigate.ProtoReflect.Descriptor instead.
func (*ClientNavigate) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{3}
}

func (x *ClientNavigate) GetMapID() string {
	if x != nil {
		return x.MapID
	}
	return ""
}

type ClientChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ClientChat) Reset() {
	*x = ClientChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientChat) ProtoMessage() {}

func (x *ClientChat) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientChat.ProtoReflect.Descriptor instead.
func (*ClientChat) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{4}
}

func (x *ClientChat) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type ServerMove struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X          int64  `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y          int64  `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	PlayerUUID string `protobuf:"bytes,3,opt,name=playerUUID,proto3" json:"playerUUID,omitempty"`
}

func (x *ServerMove) Reset() {
	*x = ServerMove{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerMove) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerMove) ProtoMessage() {}

func (x *ServerMove) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerMove.ProtoReflect.Descriptor instead.
func (*ServerMove) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{5}
}

func (x *ServerMove) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ServerMove) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ServerMove) GetPlayerUUID() string {
	if x != nil {
		return x.PlayerUUID
	}
	return ""
}

type ServerNavigate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Maploc   string        `protobuf:"bytes,1,opt,name=maploc,proto3" json:"maploc,omitempty"`
	Audioloc string        `protobuf:"bytes,2,opt,name=audioloc,proto3" json:"audioloc,omitempty"`
	Players  []*PlayerJoin `protobuf:"bytes,3,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *ServerNavigate) Reset() {
	*x = ServerNavigate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerNavigate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerNavigate) ProtoMessage() {}

func (x *ServerNavigate) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerNavigate.ProtoReflect.Descriptor instead.
func (*ServerNavigate) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{6}
}

func (x *ServerNavigate) GetMaploc() string {
	if x != nil {
		return x.Maploc
	}
	return ""
}

func (x *ServerNavigate) GetAudioloc() string {
	if x != nil {
		return x.Audioloc
	}
	return ""
}

func (x *ServerNavigate) GetPlayers() []*PlayerJoin {
	if x != nil {
		return x.Players
	}
	return nil
}

type ServerChat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PlayerUUID string `protobuf:"bytes,1,opt,name=playerUUID,proto3" json:"playerUUID,omitempty"`
	Message    string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *ServerChat) Reset() {
	*x = ServerChat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerChat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerChat) ProtoMessage() {}

func (x *ServerChat) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerChat.ProtoReflect.Descriptor instead.
func (*ServerChat) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{7}
}

func (x *ServerChat) GetPlayerUUID() string {
	if x != nil {
		return x.PlayerUUID
	}
	return ""
}

func (x *ServerChat) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type PlayerJoin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spriteloc string `protobuf:"bytes,1,opt,name=spriteloc,proto3" json:"spriteloc,omitempty"`
	X         int64  `protobuf:"varint,2,opt,name=x,proto3" json:"x,omitempty"`
	Y         int64  `protobuf:"varint,3,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *PlayerJoin) Reset() {
	*x = PlayerJoin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerJoin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerJoin) ProtoMessage() {}

func (x *PlayerJoin) ProtoReflect() protoreflect.Message {
	mi := &file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerJoin.ProtoReflect.Descriptor instead.
func (*PlayerJoin) Descriptor() ([]byte, []int) {
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP(), []int{8}
}

func (x *PlayerJoin) GetSpriteloc() string {
	if x != nil {
		return x.Spriteloc
	}
	return ""
}

func (x *PlayerJoin) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *PlayerJoin) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

var File_multiplayerservice_protocol_multiplayerservice_proto protoreflect.FileDescriptor

var file_multiplayerservice_protocol_multiplayerservice_proto_rawDesc = []byte{
	0x0a, 0x34, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01,
	0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2d, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x73, 0x67, 0x12, 0x39,
	0x0a, 0x0b, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x61,
	0x74, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x73, 0x67, 0x42, 0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x6f, 0x76, 0x65, 0x6d, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f, 0x76, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x6f, 0x76,
	0x65, 0x6d, 0x73, 0x67, 0x12, 0x3b, 0x0a, 0x0c, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x72, 0x65, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x72, 0x65, 0x73,
	0x70, 0x12, 0x2d, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x43, 0x68, 0x61, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x68, 0x61, 0x74, 0x6d, 0x73, 0x67,
	0x12, 0x2d, 0x0a, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x6d, 0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4a, 0x6f, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x6d, 0x73, 0x67, 0x42,
	0x09, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x28, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x01, 0x79, 0x22, 0x26, 0x0a, 0x0e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61,
	0x76, 0x69, 0x67, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61, 0x70, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x6f,
	0x76, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x78,
	0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x22, 0x71,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x76, 0x69, 0x67, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x70, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6d, 0x61, 0x70, 0x6c, 0x6f, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x6c, 0x6f, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x64, 0x69,
	0x6f, 0x6c, 0x6f, 0x63, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x22, 0x46, 0x0a, 0x0a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x46, 0x0a, 0x0a, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x70, 0x72, 0x69, 0x74,
	0x65, 0x6c, 0x6f, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x70, 0x72, 0x69,
	0x74, 0x65, 0x6c, 0x6f, 0x63, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x79, 0x32, 0x4f, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x68, 0x6f, 0x72, 0x61, 0x68, 0x6f, 0x72, 0x61, 0x64, 0x65, 0x76, 0x2f, 0x6e, 0x65, 0x78,
	0x75, 0x73, 0x32, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_multiplayerservice_protocol_multiplayerservice_proto_rawDescOnce sync.Once
	file_multiplayerservice_protocol_multiplayerservice_proto_rawDescData = file_multiplayerservice_protocol_multiplayerservice_proto_rawDesc
)

func file_multiplayerservice_protocol_multiplayerservice_proto_rawDescGZIP() []byte {
	file_multiplayerservice_protocol_multiplayerservice_proto_rawDescOnce.Do(func() {
		file_multiplayerservice_protocol_multiplayerservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_multiplayerservice_protocol_multiplayerservice_proto_rawDescData)
	})
	return file_multiplayerservice_protocol_multiplayerservice_proto_rawDescData
}

var file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_multiplayerservice_protocol_multiplayerservice_proto_goTypes = []interface{}{
	(*ClientMessage)(nil),  // 0: proto.ClientMessage
	(*ServerMessage)(nil),  // 1: proto.ServerMessage
	(*ClientMove)(nil),     // 2: proto.ClientMove
	(*ClientNavigate)(nil), // 3: proto.ClientNavigate
	(*ClientChat)(nil),     // 4: proto.ClientChat
	(*ServerMove)(nil),     // 5: proto.ServerMove
	(*ServerNavigate)(nil), // 6: proto.ServerNavigate
	(*ServerChat)(nil),     // 7: proto.ServerChat
	(*PlayerJoin)(nil),     // 8: proto.PlayerJoin
}
var file_multiplayerservice_protocol_multiplayerservice_proto_depIdxs = []int32{
	2, // 0: proto.ClientMessage.movemsg:type_name -> proto.ClientMove
	3, // 1: proto.ClientMessage.navigatemsg:type_name -> proto.ClientNavigate
	4, // 2: proto.ClientMessage.chatmsg:type_name -> proto.ClientChat
	5, // 3: proto.ServerMessage.movemsg:type_name -> proto.ServerMove
	6, // 4: proto.ServerMessage.navigateresp:type_name -> proto.ServerNavigate
	7, // 5: proto.ServerMessage.chatmsg:type_name -> proto.ServerChat
	8, // 6: proto.ServerMessage.joinmsg:type_name -> proto.PlayerJoin
	8, // 7: proto.ServerNavigate.players:type_name -> proto.PlayerJoin
	0, // 8: proto.MultiplayerService.Login:input_type -> proto.ClientMessage
	1, // 9: proto.MultiplayerService.Login:output_type -> proto.ServerMessage
	9, // [9:10] is the sub-list for method output_type
	8, // [8:9] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_multiplayerservice_protocol_multiplayerservice_proto_init() }
func file_multiplayerservice_protocol_multiplayerservice_proto_init() {
	if File_multiplayerservice_protocol_multiplayerservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientNavigate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerMove); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerNavigate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerChat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerJoin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ClientMessage_Movemsg)(nil),
		(*ClientMessage_Navigatemsg)(nil),
		(*ClientMessage_Chatmsg)(nil),
	}
	file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ServerMessage_Movemsg)(nil),
		(*ServerMessage_Navigateresp)(nil),
		(*ServerMessage_Chatmsg)(nil),
		(*ServerMessage_Joinmsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_multiplayerservice_protocol_multiplayerservice_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_multiplayerservice_protocol_multiplayerservice_proto_goTypes,
		DependencyIndexes: file_multiplayerservice_protocol_multiplayerservice_proto_depIdxs,
		MessageInfos:      file_multiplayerservice_protocol_multiplayerservice_proto_msgTypes,
	}.Build()
	File_multiplayerservice_protocol_multiplayerservice_proto = out.File
	file_multiplayerservice_protocol_multiplayerservice_proto_rawDesc = nil
	file_multiplayerservice_protocol_multiplayerservice_proto_goTypes = nil
	file_multiplayerservice_protocol_multiplayerservice_proto_depIdxs = nil
}
